
MEMORY {
    ZP:     start = $00,    size = $0100, type = rw, file = "";
    BSS:    start = $0100,  size = $0700, type = rw, file = "";
    WRAM:   start = $6000,  size = $2000, type = rw, file = "";
    HDR:    start = $0000,  size = $0010, type = ro, fill = yes, fillval = $00;

    BANK0:  start = $8000,  size = $4000, type = ro, fill = yes, fillval = $00;
    BANK1:  start = $8000,  size = $4000, type = ro, fill = yes, fillval = $00;
    BANK2:  start = $8000,  size = $4000, type = ro, fill = yes, fillval = $00;
    BANK3:  start = $8000,  size = $4000, type = ro, fill = yes, fillval = $00;
    BANK4:  start = $8000,  size = $4000, type = ro, fill = yes, fillval = $00;
    BANK5:  start = $8000,  size = $4000, type = ro, fill = yes, fillval = $00;
    PRG:    start = $8000,  size = $8000, type = ro, fill = yes, fillval = $00;
    #BANK6:  start = $8000,  size = $4000, type = ro, fill = yes, fillval = $00;
    #FIXEDA: start = $C000,  size = $2000, type = ro, fill = yes, fillval = $00;
    #FIXEDB: start = $E000,  size = $2000, type = ro, fill = yes, fillval = $00;

    CHR: start = $0000, size = $10000, fill = yes, fillval = $00;

}

SEGMENTS {
    ZEROPAGE:   load = ZP,  type = zp;
    BSS:        load = BSS, type = bss;
    WRAM:       load = WRAM, type = bss;

    HEADER:     load = HDR, type = ro;

    BANK0:      load = BANK0,   type = ro;
    BANK1:      load = BANK1,   type = ro;
    BANK2:      load = BANK2,   type = ro;
    BANK3:      load = BANK3,   type = ro;
    BANK4:      load = BANK4,   type = ro;
    BANK5:      load = BANK5,   type = ro;
    PRG_chunk1:        load = PRG, type = ro;
    GAME_NT_chunk:     load = PRG, type = ro, start = $BF3C;
    PRG_chunk1a:       load = PRG, type = ro, start = $C39D;
    unreferenced_data1:load = PRG, type = ro;
    PRG_chunk2:        load = PRG, type = ro, start = $DD00;
    PRG_chunkSound:    load = PRG, type = ro, start = $E000;
    unreferenced_data4:load = PRG, type = ro;
    PRG_chunk3:        load = PRG, type = ro, start = $FF00;
    VECTORS:           load = PRG, type = ro, start = $FFFA;

        # Swapable 128 kb stay out of the first two 16k as they are above
    CHR:        load = CHR, type = ro;

}
